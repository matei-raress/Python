-- Generated by Oracle SQL Developer Data Modeler 22.2.0.165.1149
--   at:        2022-12-16 11:15:56 EET
--   site:      Oracle Database 12c
--   type:      Oracle Database 12c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE actor (
    id_actor   NUMBER(3) NOT NULL,
    nume_actor VARCHAR2(20) NOT NULL
);

ALTER TABLE actor ADD CHECK ( REGEXP_LIKE ( nume_actor,
                                            '^[a-zA-Z ]*$' ) );

ALTER TABLE actor ADD CONSTRAINT actor_pk PRIMARY KEY ( id_actor );

ALTER TABLE actor ADD CONSTRAINT nume_uk UNIQUE ( nume_actor );

CREATE TABLE bilet (
    id_bilet      NUMBER(5) NOT NULL,
    id_film       NUMBER(3) NOT NULL,
    id_sala       NUMBER(2) NOT NULL,
    id_combinatie NUMBER(3) NOT NULL,
    id_client     NUMBER(4) NOT NULL,
    id_tip        NUMBER(1) NOT NULL,
    pret          NUMBER(2) NOT NULL,
    nr_loc        NUMBER(2) NOT NULL,
    nr_rand       NUMBER(2) NOT NULL
);

ALTER TABLE bilet ADD CHECK ( pret BETWEEN 0 AND 50 );

ALTER TABLE bilet ADD CHECK ( nr_loc BETWEEN 1 AND 20 );

ALTER TABLE bilet ADD CHECK ( nr_rand BETWEEN 1 AND 20 );

ALTER TABLE bilet ADD CONSTRAINT bilet_pk PRIMARY KEY ( id_bilet );

ALTER TABLE bilet
    ADD CONSTRAINT bilet_combinatie_scaun UNIQUE ( id_combinatie,
                                                   nr_loc,
                                                   nr_rand );

CREATE TABLE client (
    id_client NUMBER(4) NOT NULL,
    varsta    NUMBER(3) NOT NULL,
    statut    VARCHAR2(10) NOT NULL
);

ALTER TABLE client ADD CHECK ( varsta > 0 );

ALTER TABLE client
    ADD CHECK ( upper(statut) = 'STUDENT'
                OR upper(statut) = 'ELEV'
                OR upper(statut) = 'ADULT'
                OR upper(statut) = 'PENSIONAR'
                OR upper(statut) = 'COPIL' );

ALTER TABLE client ADD CONSTRAINT client_pk PRIMARY KEY ( id_client );

CREATE TABLE combinatie (
    id_combinatie    NUMBER(3) NOT NULL,
    id_film          NUMBER(2) NOT NULL,
    id_sala          NUMBER(2) NOT NULL,
    data_ora_film    DATE NOT NULL,
    nr_locuri_libere NUMBER(3) NOT NULL
);

ALTER TABLE combinatie ADD CHECK ( nr_locuri_libere BETWEEN 0 AND 400 );

ALTER TABLE combinatie
    ADD CONSTRAINT combinatie_pk PRIMARY KEY ( id_film,
                                               id_sala,
                                               id_combinatie );

ALTER TABLE combinatie ADD CONSTRAINT combinatie_sala_ora_uk UNIQUE ( id_sala,
                                                                      data_ora_film );

CREATE TABLE detalii_film (
    id_film   NUMBER(2) NOT NULL,
    nota_film NUMBER(4, 2),
    id_actor  NUMBER(3) NOT NULL,
    id_gen    NUMBER(3) NOT NULL
);

ALTER TABLE detalii_film ADD CHECK ( nota_film <= 10 );

CREATE UNIQUE INDEX detalii_film_id ON
    detalii_film (
        id_film
    ASC );

CREATE TABLE film (
    id_film      NUMBER(2) NOT NULL,
    nume_film    VARCHAR2(50) NOT NULL,
    data_lansare DATE NOT NULL,
    nr_de_minute NUMBER(3) NOT NULL
);

ALTER TABLE film ADD CHECK ( data_lansare >= '1-JAN-1922' );

ALTER TABLE film ADD CONSTRAINT film_pk PRIMARY KEY ( id_film );

ALTER TABLE film ADD CONSTRAINT film_nume_data_lansare_uk UNIQUE ( nume_film,
                                                                   data_lansare );

CREATE TABLE gen_film (
    nume_gen VARCHAR2(10) NOT NULL,
    id_gen   NUMBER(3) NOT NULL
);

ALTER TABLE gen_film ADD CHECK ( REGEXP_LIKE ( nume_gen,
                                               '^[a-zA-Z]*$' ) );

ALTER TABLE gen_film ADD CONSTRAINT gen_film_pk PRIMARY KEY ( id_gen );

ALTER TABLE gen_film ADD CONSTRAINT nume_gen_uk UNIQUE ( nume_gen );

CREATE TABLE sala (
    id_sala          NUMBER(2) NOT NULL,
    nr_locuri_totale NUMBER(3) NOT NULL,
    randuri          NUMBER(2) NOT NULL
);

ALTER TABLE sala ADD CHECK ( nr_locuri_totale BETWEEN 0 AND 400 );

ALTER TABLE sala ADD CHECK ( randuri BETWEEN 1 AND 20 );

ALTER TABLE sala ADD CONSTRAINT sala_pk PRIMARY KEY ( id_sala );

CREATE TABLE tip_bilet (
    id_tip   NUMBER(1) NOT NULL,
    nume_tip VARCHAR2(10) NOT NULL,
    reducere NUMBER(2) NOT NULL
);

ALTER TABLE tip_bilet
    ADD CHECK ( upper(nume_tip) = 'STUDENT'
                OR upper(nume_tip) = 'ELEV'
                OR upper(nume_tip) = 'ADULT'
                OR upper(nume_tip) = 'PENSIONAR'
                OR upper(nume_tip) = 'COPIL' );

ALTER TABLE tip_bilet ADD CHECK ( reducere >= 0 );

ALTER TABLE tip_bilet ADD CONSTRAINT tip_bilet_pk PRIMARY KEY ( id_tip );

ALTER TABLE tip_bilet ADD CONSTRAINT tip_film_uk UNIQUE ( nume_tip );

ALTER TABLE bilet
    ADD CONSTRAINT client_bilet_fk FOREIGN KEY ( id_client )
        REFERENCES client ( id_client );

ALTER TABLE bilet
    ADD CONSTRAINT combinatie_bilet_fk FOREIGN KEY ( id_film,
                                                     id_sala,
                                                     id_combinatie )
        REFERENCES combinatie ( id_film,
                                id_sala,
                                id_combinatie );

ALTER TABLE detalii_film
    ADD CONSTRAINT detalii_film_actor_fk FOREIGN KEY ( id_actor )
        REFERENCES actor ( id_actor );

ALTER TABLE detalii_film
    ADD CONSTRAINT detalii_film_gen_film_fk FOREIGN KEY ( id_gen )
        REFERENCES gen_film ( id_gen );

ALTER TABLE combinatie
    ADD CONSTRAINT film_combinatie_fk FOREIGN KEY ( id_film )
        REFERENCES film ( id_film );

ALTER TABLE detalii_film
    ADD CONSTRAINT film_detalii_film_fk FOREIGN KEY ( id_film )
        REFERENCES film ( id_film );

ALTER TABLE combinatie
    ADD CONSTRAINT sala_combinatie_fk FOREIGN KEY ( id_sala )
        REFERENCES sala ( id_sala );

ALTER TABLE bilet
    ADD CONSTRAINT tip_bilet_bilet_fk FOREIGN KEY ( id_tip )
        REFERENCES tip_bilet ( id_tip );

CREATE SEQUENCE actor_id_actor_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER actor_id_actor_trg BEFORE
    INSERT ON actor
    FOR EACH ROW
    WHEN ( new.id_actor IS NULL )
BEGIN
    :new.id_actor := actor_id_actor_seq.nextval;
END;
/

CREATE SEQUENCE bilet_id_bilet_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER bilet_id_bilet_trg BEFORE
    INSERT ON bilet
    FOR EACH ROW
    WHEN ( new.id_bilet IS NULL )
BEGIN
    :new.id_bilet := bilet_id_bilet_seq.nextval;
END;
/

CREATE SEQUENCE client_id_client_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER client_id_client_trg BEFORE
    INSERT ON client
    FOR EACH ROW
    WHEN ( new.id_client IS NULL )
BEGIN
    :new.id_client := client_id_client_seq.nextval;
END;
/

CREATE SEQUENCE combinatie_id_combinatie_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER combinatie_id_combinatie_trg BEFORE
    INSERT ON combinatie
    FOR EACH ROW
    WHEN ( new.id_combinatie IS NULL )
BEGIN
    :new.id_combinatie := combinatie_id_combinatie_seq.nextval;
END;
/

CREATE SEQUENCE detalii_film_id_film_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER detalii_film_id_film_trg BEFORE
    INSERT ON detalii_film
    FOR EACH ROW
    WHEN ( new.id_film IS NULL )
BEGIN
    :new.id_film := detalii_film_id_film_seq.nextval;
END;
/

CREATE SEQUENCE film_id_film_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER film_id_film_trg BEFORE
    INSERT ON film
    FOR EACH ROW
    WHEN ( new.id_film IS NULL )
BEGIN
    :new.id_film := film_id_film_seq.nextval;
END;
/

CREATE SEQUENCE gen_film_id_gen_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER gen_film_id_gen_trg BEFORE
    INSERT ON gen_film
    FOR EACH ROW
    WHEN ( new.id_gen IS NULL )
BEGIN
    :new.id_gen := gen_film_id_gen_seq.nextval;
END;
/

CREATE SEQUENCE sala_id_sala_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER sala_id_sala_trg BEFORE
    INSERT ON sala
    FOR EACH ROW
    WHEN ( new.id_sala IS NULL )
BEGIN
    :new.id_sala := sala_id_sala_seq.nextval;
END;
/

CREATE SEQUENCE tip_bilet_id_tip_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER tip_bilet_id_tip_trg BEFORE
    INSERT ON tip_bilet
    FOR EACH ROW
    WHEN ( new.id_tip IS NULL )
BEGIN
    :new.id_tip := tip_bilet_id_tip_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             9
-- CREATE INDEX                             1
-- ALTER TABLE                             36
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           9
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          9
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- TSDP POLICY                              0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
